#version 430 core
layout( local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout (std430, binding = 0) buffer PositionBuffer {
	vec4 positions[ ];
};

layout (std430, binding = 1) buffer VelocityBuffer {
	vec4 velocities[ ];
};

layout (std430, binding = 2) buffer LifeBuffer {
	float lifes[ ];
};

uniform float d_time;

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main(void)
{
	/*
	uint index = gl_GlobalInvocationID.x;

	vec3 pos = positions[index];
    vec4 vel = velocities[index];
	float lifetime = lifes[index];
	
	if ( lifetime <= 0 ) // reuse particle
	{
		float random = rand(pos.xz);

		// spawn from center
		pos.x = 0.0f;
		pos.y = 0.0f;
		pos.z = 0.0f;
		
		// generate speed between 0.1 and 5
		vel.x = -5 + mod(random * 100.0f, 10.0);
		vel.y = -5 + mod(random * 100.0f, 10.0);
		vel.z = -5 + mod(random * 100.0f, 10.0);
		vel.w = 1.0;
	}
	else // update particle position
	{
		pos.xyz = pos.xyz + vel.xyz * d_time;
	}

	lifetime -= d_time;

	positions[index] = pos;
	velocities[index] = vel;
	lifes[index] = lifetime;
	*/
}