#version 430
layout( local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout (std430, binding = 0) buffer PositionBuffer {
	vec4 positions[ ];
};

layout (std430, binding = 1) buffer VelocityBuffer {
	vec4 velocities[ ];
};

layout (std430, binding = 2) buffer ColorBuffer {
	vec4 colors[ ];
};

uniform float d_time;

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main(void)
{
	uint index = gl_GlobalInvocationID.x;

	vec4 particlePos = positions[index];
    vec4 particleVelocity = velocities[index];
	vec4 particleColor = colors[index];
	
	if ( particleVelocity.w <= 0 ) // reuse particle
	{
		float random = rand(particlePos.xz);

		// spawn from center
		particlePos.x = 0.0f;
		particlePos.y = 0.0f;
		particlePos.z = 0.0f;
		particlePos.w = 1.0f;
		
		// generate speed between 0.1 and 5
		particleVelocity.x = -4.9 + mod(random * 100.0f, 10.0);
		particleVelocity.y = -4.9 + mod(random * 100.0f, 10.0);
		particleVelocity.z = -4.9 + mod(random * 100.0f, 10.0);

		// set new lifetime
		particleVelocity.w = 10.0;
	}
	else // update particle position
	{
		particlePos.xyz = particlePos.xyz + particleVelocity.xyz * d_time;
	}

	particlePos.w = 1.0f;

	// lifetime update
	particleVelocity.w -= d_time;

	positions[index] = particlePos;
	positions[index] = particleVelocity;
	positions[index] = particleColor;
}