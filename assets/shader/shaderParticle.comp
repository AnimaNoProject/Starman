#version 430

layout ( binding = 0 ) buffer
buffer_InPos
{
	vec4	InPos[];
};

layout ( binding = 1 ) buffer
buffer_InVelocity
{
	vec4	InVelocity[];
};

layout ( binding = 2 ) buffer
buffer_OutPos
{
	vec4	OutPos[];
};

layout ( binding = 3 ) buffer
buffer_OutVelocity
{
	vec4	OutVelocity[];
};

// work group size
layout( local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

uniform float d_time;

uniform int particles_alive;

// random noise function
float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main(void)
{
	uint index = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;

	if(index > particles_alive)
		return;

	vec4 particlePos = InPos[index];
    vec4 particleVelocity = InVelocity[index];
	
	if ( particleVelocity.w <= 0 ) // reuse particle
	{
		float random = rand(particlePos.xz);

		// spawn from center
		particlePos.x = 0.0f;
		particlePos.y = 0.0f;
		particlePos.z = 0.0f;
		
		// generate speed between 0.1 and 5
		particleVelocity.x = -4.9 + mod(random * 100.0f, 10.0);
		particleVelocity.y = -4.9 + mod(random * 100.0f, 10.0);
		particleVelocity.z = -4.9 + mod(random * 100.0f, 10.0);

		// set new lifetime
		particleVelocity.w = 10.0;
	}
	else // update particle position
	{
		particlePos.xyz = particlePos.xyz + particleVelocity.xyz * d_time;
	}

	// color
	particlePos.w = 0.8f;

	// lifetime update
	particleVelocity.w -= d_time;

	// save particle to out
	OutPos[index] = particlePos;
    OutVelocity[index] = particleVelocity;
}