#version 430

layout( local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(std430, binding = 0) buffer Pos1
{
	vec4 Position_In[];
};

layout(std430, binding = 1) buffer Vel1
{
	vec4 Velocity_In[];
};

layout(std430, binding = 2) buffer Pos2
{
	vec4 Position_Out[];
};

layout(std430, binding = 3) buffer Vel2
{
	vec4 Velocity_Out[];
};

uniform uint LastCount;
uniform uint MaximumCount;
uniform float DeltaT;
uniform vec3 P;
uniform vec3 Dir;

void main(void)
{
	uint idx = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;
	if(idx >= LastCount) return;
	
	float TTL = Position_In[idx].w;
	if(TTL <= 0)
	{
		Position_Out[idx] = vec4(P, 5.0);
		Velocity_Out[idx] = vec4(-Dir + DeltaT, 0.0);
	}
	else
	{
		vec3 position = Position_In[idx].xyz;
		vec3 velocity = Velocity_In[idx].xyz;
		
		position += velocity * DeltaT;
		TTL = TTL - DeltaT;
		
		Position_Out[idx] = vec4(position, TTL);
		Velocity_Out[idx] = vec4(velocity, 0.0);
	}
}