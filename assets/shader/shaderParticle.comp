#version 430

layout( local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(std430, binding = 0) buffer Pos1
{
	vec4 Position_In[];
};

layout(std430, binding = 1) buffer Vel1
{
	vec4 Velocity_In[];
};

layout(std430, binding = 2) buffer Pos2
{
	vec4 Position_Out[];
};

layout(std430, binding = 3) buffer Vel2
{
	vec4 Velocity_Out[];
};

layout (binding = 4, offset = 0) uniform atomic_uint Count;

uniform uint LastCount;
uniform uint MaximumCount;
uniform float DeltaT;
uniform vec3 P;
uniform vec3 Dir;
uniform uint SpawnCount;

const float dirMod = 20;
const float posMod = 2;

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void addParticleToOutput(vec3 pos, vec3 vel, float TTL)
{
	uint nr = atomicCounterIncrement(Count);

	if(nr >= MaximumCount)
	{
		atomicCounterDecrement(Count);
		return;
	}

	Position_Out[nr] = vec4(pos, TTL);
	Velocity_Out[nr] = vec4(vel, 0);
}

void main(void)
{
	uint idx = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;
	if(idx >= LastCount) return;
	
	float TTL = Position_In[idx].w;
	vec3 newPos;
	vec3 newDir;

	if(TTL <= 0)
	{
		newPos = Position_In[idx].xyz;
		newDir = -Dir;
		float x = rand(newPos.xy);
		float y = rand(newPos.xy);
		float z = rand(newPos.yz);
		newDir.x += x - (dirMod * floor(x/dirMod));
		newDir.y += y - (dirMod * floor(y/dirMod));
		newDir.z += z - (dirMod * floor(z/dirMod));
		addParticleToOutput(P, newDir, 7.0);
	}
	else
	{
		vec3 position = Position_In[idx].xyz;
		vec3 velocity = Velocity_In[idx].xyz;
		
		position += velocity * DeltaT;
		TTL = TTL - DeltaT;

		addParticleToOutput(position, velocity, TTL);
	}

	if(idx < SpawnCount)
	{
		newPos = Position_In[idx].xyz;
		newDir = -Dir;
		float x = rand(newPos.xy);
		float y = rand(newPos.xy);
		float z = rand(newPos.yz);
		newDir.x += x - (dirMod * floor(x/dirMod));
		newDir.y += y - (dirMod * floor(y/dirMod));
		newDir.z += z - (dirMod * floor(z/dirMod));
		addParticleToOutput(P, newDir, 7.0);
	}
}